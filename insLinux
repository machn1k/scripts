#!/bin/bash

llq="/home/"$(whoami)""
bash="$llq/.bash_aliases"
pth="/usr/local/bin"
arg=$1
sp="**************************************************************"

# Wrapper Text
set-console="#!/bin/bash cd /opt/set/ && sudo ./se-toolkit"
recon_scpt="#!/bin/bash cd /opt/recon-ng/ && sudo python recon-ng.py"
beef="#!/bin/bash cd /opt/BeEF && ./beef"


helpMe() {
  
  echo "$sp"
  echo -e "Linux installer v0.1: What gets installed

	--install	apt-get Packages
			GitHub Packages, installed in /opt/*
	--bashrc	Bashrc file + Aliases
	--help		Show this help
	--info		Show extra info
	--msf		Metasploit Installation
	--ntp		NTP server setup
	--parms		File Permissions, Groups (must be run as 'root')
	--upd-scp	Generate updates script"
}

bashrc() {
	
echo -e "Bash location: $bash"
echo -e "\n
alias l='ls -l'
alias ll='ls -la'
alias l.='ls -d .*'
alias cl='clear'
alias h='history'
alias j='jobs -l'
alias ..='cd ..'
alias vi='vim'
alias svi='sudo vi'

# Updates
alias update='sudo apt-get update --yes && sudo apt-get upgrade --yes'
alias clean='sudo apt-get autoclean --yes && sudo apt-get autoremove --yes'

# Power
alias rstart='sudo shutdown -r now'
alias pwr='sudo poweroff'

alias ping='ping -c 3'
alias header='curl -I'
alias sha1='openssl sha1'
alias md5='openssl md5'
alias mount='mount |column -t'

# Netstat
alias listen='netstat -l'
alias ports='netstat -tulanp'
alias routing='netstat -r'
alias runwhere='netstat -ap | grep'
alias nterfaces='netstat -i'
alias lsnet='lsof ­i ­n'

# SYSINFO
alias meminfo='free -m -l -t'
alias cpuinfo='lscpu'

### TOP MEM EATING PROCESSES
alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'

### TOP CPU EATING PROCESSES
alias pscpu='ps auxf | sort -nr -k 3'
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'
## get GPU ram on desktop / laptop## 
alias gpumeminfo='grep -i --color memory /var/log/Xorg.0.log'

# IPTABLES
alias ipt='sudo /sbin/iptables'

### Display all rules
alias iptlist='sudo /sbin/iptables -L -n -v --line-numbers'
alias iptlistin='sudo /sbin/iptables -L INPUT -n -v --line-numbers'
alias iptlistout='sudo /sbin/iptables -L OUTPUT -n -v --line-numbers'
alias iptlistfw='sudo /sbin/iptables -L FORWARD -n -v --line-numbers'
alias firewall=iptlist\n

# Scripts
alias fhead='$llq/GitHub/scripts/fhead.sh'
alias chmac='sudo $llq/GitHub/scripts/macchange.sh'
alias comphash='$llq/GitHub/scripts/comphash.sh'
alias ascii='$llq/GitHub/scripts/PrintASCIItbl.sh'

# Elevating to root privelages
alias wireshark='sudo wireshark'
alias msfconsole='sudo msfconsole'
alias msfpayload='sudo msfpayload'
alias msfupdate='sudo msfupdate'
alias armitage='sudo armitage'" >> $bash
}

installPackages() {

	################################################### APT-GET ###################################################
	sudo apt-get update --yes && sudo apt-get upgrade --yes
	
	# Wallpapers
	sudo apt-get install ubuntu-wallpapers-karmic ubuntu-wallpapers-lucid ubuntu-wallpapers-maverick ubuntu-wallpapers-natty ubuntu-wallpapers-oneiric ubuntu-wallpapers-precise

	echo "DOING: apt-get"
	sudo apt-get install aircrack-ng argus-client bless bleachbit chkrootkit dhcp3-server dsniff ettercap-graphical foremost gimp git glade hping3 htop hydra-gtk john macchanger-gtk medusa mono-complete nmap openssl ophcrack ophcrack-cli p0f p7zip python-dev python-scapy ruby1.9.1 ruby-bundler rubygems rake-compiler scalpel sleuthkit sslstrip subversion tcpdump tcpflow tcpxtract transmission vim w3af wireshark --yes
	
	# JustSniffer :: http://justniffer.sourceforge.net/
	sudo add-apt-repository ppa:oreste-notelli/ppa 
	sudo apt-get update
	sudo apt-get install justniffer --yes

	# Download the egg:
	# https://pypi.python.org/packages/source/s/setuptools/
	sudo chmod +x ~/Downloads/*.egg && sudo ./*.egg

	# Crypto
	# https://pypi.python.org/pypi/pycrypto
	tar xzf pycrypto-2.6.tar.gz && cd pycrypto-*
	sudo python setup.py install
	
	# Armitage
	#http://www.fastandeasyhacking.com/download
	#!/bin/bash cd /opt/armitage/ && sudo ./armitage
	#extract, move to /opt
	################################################### OTHER ###################################################
	echo "DOING: Other Installs"

	# Reg-Ripper
	echo "DOING: RegRipper"
	sudo wget http://winforensicaanalysis.googlecode.com/files/RR.zip -O ~/Downloads/RegRipper.zip
	sudo unzip ~/Downloads/RegRipper.zip -d /opt/
	sudo mv /opt/DVD/ /opt/RegRipper
	sudo chmod +x /opt/RegRipper/rr.pl 
	sudo chmod +x /opt/RegRipper/rip.pl
	sudo ln -s /opt/RegRipper/rr.pl  $pth/rr.pl
	sudo ln -s /opt/RegRipper/rip.pl  $pth/rip.pl

	echo "DOING: volatility"
	sudo svn checkout http://volatility.googlecode.com/svn/trunk/ /opt/volatility
	sudo chmod +x /opt/volatility/vol.py
	sudo ln -s /opt/volatility/vol.py $pth/vol.py

	echo "DOING: Network Miner"
	sudo wget sourceforge.net/projects/networkminer/files/latest -O ~/Downloads/NetworkMiner.zip
	sudo unzip ~/Downloads/NetworkMiner.zip -d /opt/
	sudo mv /opt/NetworkMiner*/ /opt/NetworkMiner
	sudo chmod +x /opt/NetworkMiner/NetworkMiner.exe
	sudo chmod -R go+w /opt/NetworkMiner/AssembledFiles/
	sudo chmod -R go+w /opt/NetworkMiner/Captures/
	sudo ln -s /opt/NetworkMiner/NetworkMiner.exe $pth/NetworkMiner
	echo "Run 'sudo mono networkMiner'"

	echo "DOING: Aircrack"
	#tar xzf ~/Downloads/aircrack-ng-1.1.tar.gz
	#cd aircrack*
	#sudo make && make install

	### Other WGETs
	# Slowloris :: http://ha.ckers.org/slowloris/
	### Dependencies
	#### http://perldoc.perl.org/IO/Socket/INET.html
	#### http://search.cpan.org/~behroozi/IO-Socket-SSL-0.97/
	#### http://search.cpan.org/~jv/Getopt-Long-2.38/
	wget http://ha.ckers.org/slowloris/slowloris.pl -O ~/Downloads/slowloris.pl
	
	# hulk :: http://packetstormsecurity.com/files/download/112856/hulk.zip
	wget http://dl.packetstormsecurity.net/DoS/hulk.zip -O ~/Downloads/hulk.zip

	# zaproxy
	wget http://zaproxy.googlecode.com/files/ZAP_2.1.0_Linux.tar.gz -O ~/Downloads/zaproxy.tar.gz
	
	# hostapd
	wget http://w1.fi/releases/hostapd-x.y.z.tar.gz -O ~/Downloads/hostapd.tar.gz
	# http://linuxwireless.org/en/users/Documentation/hostapd

	########################################## GIT ###################################################
	echo "DOING: Git"

	# Social Engineer Toolkit
	echo "DOING: set"
	sudo git clone https://github.com/trustedsec/social-engineer-toolkit.git /opt/set
	sudo chmod +x /opt/set/set
	sudo echo -e "$set_scpt" >> $pth/set-console
	sudo chmod +x $pth/set-console

	# SQLmap
	echo "DOING: SQLmap"
	sudo git clone https://github.com/sqlmapproject/sqlmap.git /opt/sqlmap
	sudo chmod +x /opt/sqlmap/sqlmap.py 
	sudo ln -s /opt/sqlmap/sqlmap.py $pth/sqlmap

	# Recon-ng
	echo "DOING: recon-ng"
	sudo git clone https://bitbucket.org/LaNMaSteR53/recon-ng.git /opt/recon-ng
	sudo ln -s /opt/recon-ng/recon-ng.py $pth/recon-ng
	sudo echo -e "$recon_scpt" >> $pth/recon-ng
	sudo chmod +x $pth/recon-ng

	#BeEF
	sudo gem install bundler
	#***** MySQL "root" user's password: [here]
	sudo apt-get install libsqlite3-dev --yes
	sudo apt-get install sqlite3 sqlite3-doc build-essential git-core curl mysql-client mysql-server libmysql-ruby libmysqlclient-dev libreadline6-dev zlib1g-dev libssl-dev libyaml-dev libxml2-dev libxslt1-dev autoconf libgdbm-dev libncurses5-dev automake libtool bison libffi-dev --yes

	bash -s stable < <(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
	echo '[[ -s "/home/`$(whoami)`/.rvm/scripts/rvm" ]] && source "/home/`$(whoami)`/.rvm/scripts/rvm"' >> ~/.bashrc
	echo 'source ~/.bashrc' >> ~/.bashrc

	type rvm | head -1
	rvm install 1.9.3
	rvm use --default 1.9.3
	rvm 1.9.3 do gem install mysql2
	rvm use system

	sudo git clone https://github.com/beefproject/beef.git /opt/BeEF
	sudo chmod +x /opt/BeEF/beef && sudo ln -s /opt/BeEF/beef $pth/beef
	cd /opt/BeEF/ && bundle install
	# If an error pops up for 'Gemfile.lock', vim it and provide permissions
	# troubleshoot "do_sqlite3" with gem install do_sqlite3
	
	# Scripts
	echo "DOING: machn1k scripts"
	sudo git clone https://github.com/machn1k/scripts.git ~/GitHub/machn1k

	sudo apt-get autoclean --yes && sudo apt-get autoremove --yes

}

linuxParams() {
   
	groupadd admin
	usermod -g admin $(whoami)

	chown root:admin /bin/su
	chmod 04750 /bin/su

	# Securing History
	chattr +I .bash_history
	chattr +a .bash_history
	chattr -­R +i /bin
	chattr ­-R +i /sbin
	chattr ­-R +i /boot
	chattr ­-R +i /lib
	chattr ­-R +i /usr

	# Change permissions
	chmod 700 /bin/ping
	chmod 700 /usr/bin/who
	chmod 700 /usr/bin/w
	chmod 700 /usr/bin/locate
	chmod 700 /usr/bin/whereis
	chmod 700 /sbin/ifconfig
	chmod 700 /sbin/ifdown
	chmod 700 /bin/nano
	chmod 700 /usr/bin/vi
	chmod 700 /usr/bin/which 
	chmod 700 /usr/bin/gcc
	chmod 700 /usr/bin/make
	chmod 700 /usr/bin/apt*
	chmod 700 /usr/bin/wget
}

msf() {

	# Install Metasploit
	echo "DOING: metasploit"
	sudo chmod +x ~/Downloads/metasploit*
	sudo sh ~/Downloads/metasploit*
}


nfo() {

	# Display useful info
	echo -e "$sp
	UBUNTU LOGS
	/var/log/audit/audit.log

	MONITOR NETWORK / OPEN FILES
	$lsof ­i ­n | egrep 'COMMAND|LISTEN|UDP'

	PROCESSES
	$ ps aux | grep 'ssh'

	RUNNING SERVICES
	$ sysv­rc­conf ­­list | grep '$(whoami)'

	PACKET FLOODING PREVENTION
	$ net/ipv4/tcp_syncookies = 1

	$sp
	Find SUID & SGID files on the system
	$ sudo find / \( ­perm ­4000 ­o ­perm ­2000 \) $ sudo find / ­perm ­4000 ­o ­perm ­2000 chmod ­s [file]

	$sp
	PARTITIONING
	$ cat /dev/[mnt pt: tmp] 
	\t/tmp ext3 defaults,noexec,nodev 1 2
	\t/dev/[mnt pt: home] 
	\t/home ext3 defaults,nosuid,nodev 1 2 

	$sp
	ssh
	$ cat /etc/ssh/ssh_config | grep 'AllowGroups\|PermitRoot\|Protocol\|RSAAuthentication' | less
	$ vi /etc/ssh/ssh_config    # CLIENT
	$ vi /etc/ssh/sshd_config   # SERVER
	\t———— sshd_config File ———————————————————————————
	\tPermitRootLogin no
	\tPasswordAuthentication yes
	\tAllowGroups sshusers
	\tProtocol 2 
	\t——————————————————————————————————————— 

	$ /etc/init.d/ssh restart # Restart
	$ services sshd restart 

	KEYS  
	$ ssh­keygen -­t rsa ­-b 4096 -f ~/.ssh/rsa_key
	$ ssh­keygen ­-t dsa -­b 1024 -f ~/.ssh/dsa_key

	TESTING
	echo -e "$ ssh $(whoami)@localhost" | less

	SIMPLE PYTHON SERVER FOR TESTING
	$ python -m SimpleHTTPServer

	$sp
	# Disable IPv6: Requires Reboot
	$ cat /etc/modprobe.d/aliases |grep net­pf­10
		#   alias net­pf­10 off ipv6

	$sp
	BLOCKLIST: http://list.iblocklist.com/?list=bt_level1&fileformat=p2p&archiveformat=gz

	$sp
	## .bashrc, referencing alias file
	if [ -f ~/.bash_aliases ]; then
	    . ~/.bash_aliases
	fi
	"
}

ntp () {
    	
	#Install NTP, activate it as a service
	sudo apt-­get install ntp --yes
	chkconfig ntpd on

	echo -e "Editing configuration file"
	sudo echo -e "server 0.north­america.pool.ntp.org
	server 1.north­america.pool.ntp.org
	server 2.north­america.pool.ntp.org
	server 3.north­america.pool.ntp.org" >> /etc/ntp.conf

	sudo /etc/init.d/ntp start

	#IPtables: Accept UDP connections from NTP
	sudo iptables ­I INPUT ­p udp ­­dport 123 ­j ACCEPT
	sudo iptables ­I OUTPUT ­p udp ­­sport 123 ­j ACCEPT
}														

sshConf() {
	
	echo "SSH config to come."
}

build_upd_scp() {

	# Build a linux update script for GitHub
	sudo echo -e "#!/bin/bash\n
	cd /opt/set && sudo git pull
	cd /opt/msf && sudo git pull
	cd /opt/recon-ng && sudo git pull
	cd /opt/w3af && sudo git pull
	sudo gem update" >> $pth/updates 
	
	sudo chmod +x $pth/updates 
}

# Logic
if [ $arg = "--install" ]; then
   installPackages
   exit
elif [ $arg = "--bashrc" ]; then
   bashrc
   exit
elif [ $arg = "--help" ]; then
   helpMe
   exit
elif [ $arg = "--info" ]; then
   nfo
   exit
elif [ $arg = "--msf" ]; then
   msf
   exit
elif [ $arg = "--ntp" ]; then 
   ntp
   exit
elif [ $arg = "--parms" ]; then
   linuxParams
   exit
else
   helpMe
fi

